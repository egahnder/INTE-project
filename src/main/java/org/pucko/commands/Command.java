package org.pucko.commands;

import java.nio.file.Path;
import java.util.ArrayList;

import org.pucko.core.OutputHandler;
import org.pucko.core.WorkingDirectory;

public abstract class Command implements OutputHandler {

    private final WorkingDirectory workingDirectory;
    private final ArrayList<String> args;
    private final OutputHandler outputHandler;
    private final OutputHandler errorHandler;
    private boolean validForExecute;
    private boolean executable;
    private boolean validForUndo;
    private boolean undoable;

    /**
     *
     * @param args Arguments used during execution of command.
     * @param workingDirectory The working directory in which the command should execute.
     * @param outputHandler Where the output generated by the command should be sent.
     * @param errorHandler Where the errors generated by the should be sent.
     */
    public Command(ArrayList<String> args, WorkingDirectory workingDirectory, OutputHandler outputHandler, OutputHandler errorHandler) {
        this.args = args;
        this.workingDirectory = workingDirectory;
        this.outputHandler = outputHandler;
        this.errorHandler = errorHandler;
    }

    /**
     * Execute the logic of the implementing command.
     * The implementor must ensure that all checked exceptions are handled.
     * @return true if method was run without any exceptions, otherwise false.
     */
    protected abstract boolean execute();

    /**
     * Runs all the checks needed to ensure that the command can be properly run.
     * The implementor must ensure that all checked exceptions are handled.
     * @return true if the command can be executed properly, otherwise false.
     */
    protected abstract boolean verifyExecutable();

    /**
     * Undoes the logic of the executed command.
     * The implementor must ensure that all checked exceptions are handled.
     * @return true if method was run without any exceptions, otherwise false.
     */
    protected abstract boolean undo();

    protected abstract boolean verifyUndoable();


    /**
     *
     * @return true if the command was executed properly. Returns false if there was an error running the command or if
     * the command was invalid.
     */
    public boolean runCommand() {
        if (!validForExecute) {
            validateForExecution();
        }
        return executable && execute();
    }

    /**
     *
     * @return true if the command was reverted properly or if the command was never executed. Returns false if there
     * was an error reverting the command.
     */
    public boolean revertCommand() {
        if (!validForUndo) {
            validateForUndo();
        }
        return undoable && undo();
    }

    /**
     * Appends argument to command. Invalidates for undo and execution.
     * @param output String that should be appended to the commands arguments.
     */
    @Override
    public void handleOutput(String output) {
        args.add(output);
        invalidateForExecution();
        invalidateForUndo();
    }

    /**
     * returns argument for a Command
     * @param index index of command argument.
     * @return argument for command.
     */
    protected final String getArg(int index) {
        return args.get(index);
    }

    /**
     * Changes the path of the working directory
     * @param newPath The new path for the working directory.
     */
    protected final void setWorkingDirectory(Path newPath){
        workingDirectory.changePath(newPath);
        invalidateForExecution();
        invalidateForUndo();
    }

    /**
     *
     * @return Path set in working directory.
     */
    protected final Path getWorkingDirectory(){
        return workingDirectory.getPath();
    }

    /**
     * Used to send out output generated in Command
     * @param output Output to send out
     */
    protected final void output(String output) {
        outputHandler.handleOutput(output);
    }

    /**
     * Used to send out errors generated in Command.
     * @param error Error to send out
     */
    protected final void error(String error){
        errorHandler.handleOutput(error);
    }

    /**
     * Validated that command can be executed.
     */
    private void validateForExecution() {
        executable = verifyExecutable();
        validForExecute = true;
    }

    /**
     * Invalidates command from being executed.
     */
    private void invalidateForExecution() {
        validForExecute = false;
    }

    /**
     * Validates that command can be undone.
     */
    private void validateForUndo() {
        undoable = verifyUndoable();
        validForExecute = true;
    }

    /**
     * Invalidates command from being undone.
     */
    private void invalidateForUndo() {
        validForUndo = false;
    }
}

