/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'eric' at '8/24/16 5:43 PM' with Gradle 3.0
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'eclipse'

// We will use findbugs at a later stage.
// apply plugin: 'findbugs' 

jar {
    manifest {
        attributes 'Main-Class': 'org.pucko.core.Program'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

configurations {
    providedRuntime
    codacy
  }
  


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.

	// https://mvnrepository.com/artifact/com.google.guava/guava
	compile group: 'com.google.guava', name: 'guava', version: '18.0'


	// https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
	compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile 'junit:junit:4.12'
    
    //Codacy reporter
    codacy group: 'com.codacy', name: 'codacy-coverage-reporter', version: '1.0.10'
    
    // https://mvnrepository.com/artifact/org.mockito/mockito-all
	compile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
	
	// https://mvnrepository.com/artifact/com.github.stefanbirkner/system-rules
	compile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.16.0'
}



// Tell Gradle to generate jaCoCo reports
// get Gradle to generate report by running "Gradle jacocoTestReport"


	jacocoTestReport {
		dependsOn 'build'
	    group = "Reporting"
	    description = "Generate jaCoCo coverage report"
	    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

	    reports {
      xml.enabled true
      xml.destination "${buildDir}/reports/jacoco/${archivesBaseName}.xml"
      csv.enabled false
      html.enabled true
      html.destination "${buildDir}/reports/jacoco/html"
      }

	}
	
// Generate Findbugs HTML report
	
	tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

// Send coverage statistics to Codacy
//
	task uploadCoverageToCodacy(type: JavaExec, dependsOn : jacocoTestReport) {
	   main = "com.codacy.CodacyCoverageReporter"
	   classpath = configurations.codacy
	   args = [
	            "-l",
	            "Java",
	            "-r",
	            "${buildDir}/reports/jacoco/${archivesBaseName}.xml"
	           ]
	}
	
	task (codacyDepsize) << {
	def size = 0;
	configurations.codacy.collect { it.length() / (1024 * 1024) }.each { size += it }
	println "Total dependencies size: ${Math.round(size * 100) / 100} Mb"
	
	configurations
	        .codacy
	        .sort { -it.length() }
	        .each { println "${it.name} : ${Math.round(it.length() / (1024) * 100) / 100} kb" }
	}
	
	task (codacyLocs) << {
	    configurations.codacy.each {
	        String jarName = it
	        println jarName
	    }
	}

